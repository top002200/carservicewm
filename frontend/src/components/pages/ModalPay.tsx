import React, { useState, useEffect } from "react";
import { Modal, Button, Form, ButtonGroup, Alert } from "react-bootstrap";
import Swal from "sweetalert2";
import { updateBill } from "../../services/api"; // ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ path ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
import { BillData } from "../../interface/IBill"; 

// ‡πÉ‡∏ä‡πâ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã BillData ‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏°‡∏≤


interface ModalPayProps {
  show: boolean;
  onHide: () => void;
  // ‚úÖ ‡πÉ‡∏ä‡πâ BillData ‡∏ó‡∏µ‡πà Import ‡∏°‡∏≤‡∏à‡∏≤‡∏Å IBill.ts
  bill: BillData | null; 
  onSave: () => void;
}

const ModalPay: React.FC<ModalPayProps> = ({ show, onHide, bill, onSave }) => {
  const [selectedMethod, setSelectedMethod] = useState<
    "cash" | "transfer" | "cash+transfer" | ""
  >("");
  const [cashAmount, setCashAmount] = useState<number | "">(""); // cash_transfer1
  const [transferAmount, setTransferAmount] = useState<number | "">(""); // cash_transfer2
  const [note, setNote] = useState("");
  const billTotal = bill?.total || 0;

  // üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const isPaymentSettled = bill
    ? !!bill.payment_method &&
      bill.payment_method !== "" &&
      bill.payment_method.toLowerCase() !== "unpaid" &&
      bill.payment_method.toLowerCase() !== "credit_card"
    : false;

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 05:15 ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  const isTimeLocked = (() => {
    // ‡πÉ‡∏ä‡πâ bill.date ‡πÅ‡∏ó‡∏ô bill.bill_date ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö interface ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤
    const dateToUse = bill?.bill_date || bill?.date;
    if (!dateToUse) return false;
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà cutoff ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ bill_date/date ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ 05:15:00
      const cutoffTime = new Date(`${dateToUse}T05:15:00`);
      const now = new Date();
      return now > cutoffTime;
    } catch (e) {
      console.error("Time parse error:", e);
      return false;
    }
  })();

  useEffect(() => {
    if (show && bill) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á method ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
      setSelectedMethod(
        isPaymentSettled
          ? (bill.payment_method as any)
          : bill.payment_method === "credit_card"
          ? ""
          : (bill.payment_method as any) || ""
      );
      // ‡πÉ‡∏ä‡πâ bill.cash_transfer1 ‡πÅ‡∏•‡∏∞ bill.cash_transfer2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
      setCashAmount(bill.cash_transfer1 || "");
      setTransferAmount(bill.cash_transfer2 || "");
      setNote(bill.payment_note || "");
    } else if (!show) {
      setSelectedMethod("");
      setCashAmount("");
      setTransferAmount("");
      setNote("");
    }
  }, [show, bill, isPaymentSettled]);

  const toNum = (v: any): number => {
    const n = Number(String(v).replace(/,/g, "").trim());
    return Number.isFinite(n) ? n : 0;
  };

  const currentCash = toNum(cashAmount);
  const currentTransfer = toNum(transferAmount);

  const paidTotal =
    selectedMethod === "cash+transfer"
      ? currentCash + currentTransfer
      : selectedMethod === "cash"
      ? currentCash
      : selectedMethod === "transfer"
      ? currentTransfer
      : 0;

  const isOverpaid = paidTotal > billTotal;
  const remainingDue = billTotal - paidTotal;
  const isPaid = paidTotal >= billTotal;

  const handleMethodChange = (
    method: "cash" | "transfer" | "cash+transfer"
  ) => {
    if (isPaymentSettled || isTimeLocked) return; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤

    setSelectedMethod(method);

    if (method === "cash") {
      setCashAmount(billTotal);
      setTransferAmount(0); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå Transfer ‡πÄ‡∏õ‡πá‡∏ô 0
    } else if (method === "transfer") {
      setCashAmount(0); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå Cash ‡πÄ‡∏õ‡πá‡∏ô 0
      setTransferAmount(billTotal);
    } else if (method === "cash+transfer") {
      setCashAmount(0);
      setTransferAmount(0);
    }
  };

  const handleUpdatePayment = async () => {
    if (isPaymentSettled || isTimeLocked) return; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤

    if (!bill || !bill.id || !selectedMethod) {
      Swal.fire("‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", "warning");
      return;
    }
    if (paidTotal <= 0) {
      Swal.fire("‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞", "warning");
      return;
    }
    if (isOverpaid) {
      Swal.fire("‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏£‡∏ß‡∏°‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Å‡∏¥‡∏ô‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ö‡∏¥‡∏•", "warning");
      return;
    }

    const updateData: Partial<BillData> = {
      payment_method: selectedMethod,
      cash_transfer1: currentCash,
      cash_transfer2: currentTransfer,
      payment_note: note,
      payment_status: isPaid ? "paid" : "partial",
    };

    // ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ currentCash/currentTransfer ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° selectedMethod ‡πÅ‡∏•‡πâ‡∏ß
    // ‡∏à‡∏∂‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ if/else ‡∏ã‡πâ‡∏≥‡∏≠‡∏µ‡∏Å
    // ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô cash/transfer ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡πÜ ‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÑ‡∏î‡πâ
    if (selectedMethod === "cash") {
        updateData.cash_transfer1 = billTotal;
        updateData.cash_transfer2 = 0;
    } else if (selectedMethod === "transfer") {
        updateData.cash_transfer1 = 0;
        updateData.cash_transfer2 = billTotal;
    }


    try {
      const res = await updateBill(bill.id, updateData);

      if (res.status) {
        Swal.fire(
          "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô ${selectedMethod} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`,
          "success"
        );
        onSave();
      } else {
        Swal.fire(
          "‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          res.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ",
          "error"
        );
      }
    } catch (err) {
      console.error("Payment update error:", err);
      Swal.fire("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ", "error");
    }
  };

  const handleNumChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,
    setter: React.Dispatch<React.SetStateAction<number | "">>
  ) => {
    // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Cash/Transfer ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡πÜ (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô billTotal ‡πÅ‡∏•‡πâ‡∏ß)
    // ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ disabled ‡πÉ‡∏ô Form.Control ‡∏Å‡πá‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
    const isSingleMethodLocked = 
        (selectedMethod === 'cash' || selectedMethod === 'transfer') && 
        (isPaymentSettled || isTimeLocked);

    if (isSingleMethodLocked) return; 

    const value = e.target.value.trim();
    if (value === "") {
      setter("");
    } else {
      const num = parseFloat(value);
      if (!isNaN(num)) {
        setter(num);
      } else {
        setter((prev) => (typeof prev === "number" ? prev : ""));
      }
    }
  };

  // üí° ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏¥‡∏•‡∏î‡πå
  const isCashInputDisabled = 
    isPaymentSettled || 
    isTimeLocked || 
    selectedMethod === 'cash';

  const isTransferInputDisabled = 
    isPaymentSettled || 
    isTimeLocked || 
    selectedMethod === 'transfer';


  return (
    <Modal show={show} onHide={onHide} centered>
      <Modal.Header closeButton className="bg-success text-white">
        <Modal.Title>
          {isPaymentSettled ? "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"}
          <small className="ms-2 opacity-75">
            (‡∏ö‡∏¥‡∏•‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: {bill?.bill_number || "-"})
          </small>
        </Modal.Title>
      </Modal.Header>
      <Modal.Body>
        {isPaymentSettled && (
          <Alert variant="info" className="text-center">
            ‡∏ö‡∏¥‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ
          </Alert>
        )}

        {/* ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ */}
        {isTimeLocked && (
          <Alert variant="warning" className="text-center">
            ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß (‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 05:15 ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà{" "}
            {bill?.bill_date || bill?.date || "-"})
          </Alert>
        )}

        {bill ? (
          <Form>
            <h5 className="mb-3 text-center text-danger fw-bold">
              ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ö‡∏¥‡∏•:{" "}
              {billTotal.toLocaleString("th-TH", { minimumFractionDigits: 2 })}{" "}
              ‡∏ö‡∏≤‡∏ó
            </h5>

            <Form.Group className="mb-3">
              <Form.Label className="fw-bold">
                ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
              </Form.Label>
              <ButtonGroup className="d-flex">
                <Button
                  variant={
                    selectedMethod === "cash" ? "primary" : "outline-primary"
                  }
                  onClick={() => handleMethodChange("cash")}
                  disabled={isPaymentSettled || isTimeLocked} // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°
                >
                  ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î
                </Button>
                <Button
                  variant={
                    selectedMethod === "transfer"
                      ? "success"
                      : "outline-success"
                  }
                  onClick={() => handleMethodChange("transfer")}
                  disabled={isPaymentSettled || isTimeLocked} // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°
                >
                  ‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏≠‡∏ô
                </Button>
                <Button
                  variant={
                    selectedMethod === "cash+transfer"
                      ? "warning"
                      : "outline-warning"
                  }
                  onClick={() => handleMethodChange("cash+transfer")}
                  disabled={isPaymentSettled || isTimeLocked} // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°
                >
                  ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î + ‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏≠‡∏ô
                </Button>
              </ButtonGroup>
            </Form.Group>

            {(selectedMethod === "cash" ||
              selectedMethod === "cash+transfer") && (
              <Form.Group className="mb-3" controlId="cashAmount">
                <Form.Label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î (cash_transfer1)</Form.Label>
                <Form.Control
                  type="number"
                  placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î"
                  value={cashAmount}
                  onChange={(e) => handleNumChange(e, setCashAmount)}
                  min={0}
                  max={billTotal}
                  // ‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå
                  disabled={isCashInputDisabled} 
                />
              </Form.Group>
            )}

            {(selectedMethod === "transfer" ||
              selectedMethod === "cash+transfer") && (
              <Form.Group className="mb-3" controlId="transferAmount">
                <Form.Label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏≠‡∏ô (cash_transfer2)</Form.Label>
                <Form.Control
                  type="number"
                  placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏≠‡∏ô"
                  value={transferAmount}
                  onChange={(e) => handleNumChange(e, setTransferAmount)}
                  min={0}
                  max={billTotal}
                  // ‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå
                  disabled={isTransferInputDisabled}
                />
              </Form.Group>
            )}

            {selectedMethod && paidTotal > 0 && (
              <Alert
                variant={isOverpaid ? "danger" : isPaid ? "success" : "info"}
                className="mt-3"
              >
                <p className="mb-0 fw-bold">
                  ‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏£‡∏ß‡∏°:{" "}
                  {paidTotal.toLocaleString("th-TH", {
                    minimumFractionDigits: 2,
                  })}{" "}
                  ‡∏ö‡∏≤‡∏ó
                </p>
                <p className="mb-0">
                  {isOverpaid
                    ? "üö® ‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô‡∏ö‡∏¥‡∏•! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
                    : remainingDue > 0
                    ? `‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞: ${remainingDue.toLocaleString("th-TH", {
                        minimumFractionDigits: 2,
                      })} ‡∏ö‡∏≤‡∏ó`
                    : "‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß"}
                </p>
              </Alert>
            )}
          </Form>
        ) : (
          <p className="text-center text-danger">
            ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
          </p>
        )}
      </Modal.Body>
      <Modal.Footer>
        <Button variant="secondary" onClick={onHide}>
          {isPaymentSettled ? "‡∏õ‡∏¥‡∏î" : "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"}
        </Button>
        <Button
          variant="success"
          onClick={handleUpdatePayment}
          disabled={
            !bill ||
            !selectedMethod ||
            paidTotal <= 0 ||
            isOverpaid ||
            isPaymentSettled ||
            isTimeLocked // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°
          }
        >
          {isPaymentSettled
            ? "‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
            : isTimeLocked
            ? "‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"
            : "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"}
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default ModalPay;